<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>递归和搜索 on My New Hugo Site</title>
    <link>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/</link>
    <description>Recent content in 递归和搜索 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 19 Feb 2020 21:01:00 +0800</lastBuildDate>
    
	<atom:link href="https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>文件结构图</title>
      <link>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/</link>
      <pubDate>Mon, 02 Mar 2020 21:24:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%9B%BE/</guid>
      <description>题目链接 文件结构图
题目描述 给定文件的结构，按照结构图的形式输出。
解题思路  用递归的方法。比较巧妙。  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;string&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;fstream&amp;gt;using namespace std; int file(int k, int nkase, string f); int main() { int kase = 0; while (1) { ++kase; int t = file(0, kase, &amp;#34;ROOT&amp;#34;); if (t == 0) { break; } cout &amp;lt;&amp;lt; endl; } return 0; } int file(int k, int nkase, string f) { for (int i = 0; i &amp;lt; k; ++i) { cout &amp;lt;&amp;lt; &amp;#34;| &amp;#34;; } if (k) { cout &amp;lt;&amp;lt; f &amp;lt;&amp;lt; endl; } int flag = 0; vector&amp;lt;string&amp;gt; v; while (1) { string s; cin &amp;gt;&amp;gt; s; if (s[0] == &amp;#39;#&amp;#39;)	return 0; if (!</description>
    </item>
    
    <item>
      <title>The Sierpinski Fractal</title>
      <link>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/the-sierpinski-fractal/</link>
      <pubDate>Mon, 02 Mar 2020 20:26:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/the-sierpinski-fractal/</guid>
      <description>题目链接 The Sierpinski Fractal
题目描述 给定n,画出对应大小的分型图形。
解题思路  用递归的方法画图，感觉很巧妙。这题难的就是细节。 要首先把图用char数组存起来，画好之后再输出。 注意反斜杠需要转义，注意空白的地方补空格，注意不要多输出一行。  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;string&amp;gt;using namespace std; char map[2500][2500]; void draw(int k, int x, int y); int main() { int n; while (scanf(&amp;#34;%d&amp;#34;, &amp;amp;n)) { if (!n) break; memset(map, &amp;#39;&amp;#39;, sizeof(map)); draw(n, 0, (1 &amp;lt;&amp;lt; n) - 1); for (int i = 0; i &amp;lt; (1 &amp;lt;&amp;lt; n); ++i) { for (int j = 0; j &amp;lt; ((1 &amp;lt;&amp;lt; n) + i + 1); ++j) { printf(&amp;#34;%c&amp;#34;, map[i][j]); } printf(&amp;#34;\n&amp;#34;); } printf(&amp;#34;\n&amp;#34;); } return 0; } void draw(int k, int x, int y) { if (k == 1) { map[x][y] = &amp;#39;/&amp;#39;; map[x][y + 1] = &amp;#39;\\&amp;#39;; map[x + 1][y - 1] = &amp;#39;/&amp;#39;; map[x + 1][y] = &amp;#39;_&amp;#39;; map[x + 1][y + 1] = &amp;#39;_&amp;#39;; map[x + 1][y + 2] = &amp;#39;\\&amp;#39;; return; } --k; int xx = x + (1 &amp;lt;&amp;lt; k); int yyl = y - (1 &amp;lt;&amp;lt; k); int yyr = y + (1 &amp;lt;&amp;lt; k); draw(k, x, y); draw(k, xx, yyl); draw(k, xx, yyr); return; } </description>
    </item>
    
    <item>
      <title>传教士与食人族</title>
      <link>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/%E4%BC%A0%E6%95%99%E5%A3%AB%E4%B8%8E%E9%A3%9F%E4%BA%BA%E6%97%8F/</link>
      <pubDate>Mon, 02 Mar 2020 20:26:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/%E4%BC%A0%E6%95%99%E5%A3%AB%E4%B8%8E%E9%A3%9F%E4%BA%BA%E6%97%8F/</guid>
      <description>题目链接 传教士与食人族
题目描述 有M个传教士和野人。一个容量为N的船。他们想从A到B地，要保证无论是在A还是B还是船上，如果有传教士，那么那里的野人数一定不超过传教士数目。问最少要几步能完成任务。
解题思路  此题可以用bfs，但是POJ有一个类似题直接bfs会RE，估计要A*算法。 这个题难度在状态的表示，其实只需要记录A地的传教士数目，野人数目，和船的行驶方向即可。枚举可能在船上的人数情况，就能根据总人数直接推断出B地的人数。  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;string&amp;gt;#include&amp;lt;cmath&amp;gt;using namespace std; struct Node { int m, c;//m是传教士数，c是野人数  int step; int to;//0表示要从A到B，1表示要从B到A }; bool visit[1010][1010][2]; int M;//M个cannibal和missionary int N;//船的容量 queue&amp;lt;Node&amp;gt; q; int main() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;M, &amp;amp;N); Node nd; nd.m = M; nd.c = M; nd.step = 0; nd.to = 0; q.push(nd); visit[M][M][0] = 1; int ans = -1; while (!q.empty()) { nd = q.front(); q.pop(); if (nd.m == 0 &amp;amp;&amp;amp; nd.</description>
    </item>
    
    <item>
      <title>布尔表达式</title>
      <link>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 02 Mar 2020 20:26:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/%E5%B8%83%E5%B0%94%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>题目链接 布尔表达式
题目描述 对布尔表达式进行求值。
解题思路  要把所求问题分为：表达式、项、因子三个部分，递归求解。 表达式：若干个项通过&amp;amp;，|连接起来，就是表达式 项：一个因子是一个项。一个因子取非是一个项。 因子：V和F是因子。带括号的表达式是因子。 由于取非是前置运算符，因此在factorValue()中，如果检测到了！,就直接调用itemValue进行求值。 其实表达式，项，因子就是按照优先级顺序对表达式进行拆分。感觉很容易写错，以后还是考虑用栈写吧。  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;string&amp;gt;using namespace std; char s[100]; int len; int move_blank(char* a); bool expValue(); bool itemValue(); bool factorValue(); int ope = 0; //处理位置 int main() { char a[110]; int kase = 0; while (cin.getline(a, 110, &amp;#39;\n&amp;#39;)) { ++kase; memset(s, 0, sizeof(s)); len = move_blank(a); bool f = expValue(); cout &amp;lt;&amp;lt; &amp;#34;Expression &amp;#34; &amp;lt;&amp;lt; kase &amp;lt;&amp;lt; &amp;#34;: &amp;#34;; if (f) cout &amp;lt;&amp;lt; &amp;#34;V&amp;#34; &amp;lt;&amp;lt; endl; else cout &amp;lt;&amp;lt; &amp;#34;F&amp;#34; &amp;lt;&amp;lt; endl; memset(a, 0, sizeof(a)); ope = 0; } } int move_blank(char* a) { char* p = a; int i = 0; for (; *p !</description>
    </item>
    
    <item>
      <title>全排列</title>
      <link>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/%E5%85%A8%E6%8E%92%E5%88%97/</link>
      <pubDate>Wed, 19 Feb 2020 22:01:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/%E5%85%A8%E6%8E%92%E5%88%97/</guid>
      <description>题目描述 求1~n的全排列
解题思路  用dfs枚举全排列  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;string&amp;gt;using namespace std; int result[200]; int N; int used[200]; /*用dfs生成全排列*/ void permutation1(int k); /*优化后的全排列生成,但不是按顺序生成的， 思路： 求 S = {a1,a2,a3..an}的全排列，等于: for (int i = 1; i &amp;lt;= n; ++i ) { for x in (S – ai) 的每个排列 cout &amp;lt;&amp;lt; ai + x; } */ template&amp;lt;class T&amp;gt; void permutation2(T start, T end, T k) { //输出[start,k)固定的全排列  if (k == end) { for (start; start !</description>
    </item>
    
    <item>
      <title>Lake Counting</title>
      <link>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/lake-counting/</link>
      <pubDate>Wed, 19 Feb 2020 21:37:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/lake-counting/</guid>
      <description>题目链接 POJ2386 Lake Counting
题目描述 一个N*M的院子，雨后有积水。八连通的积水被认为是在一起的。求总共多少个水洼？
解题思路  用dfs遍历院子，进行染色。  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;string&amp;gt;using namespace std; char maze[110][110]; int visit[110][110]; int color; int n;//n行 int m;//m列 int go[8][2] = { {-1, 0}, {-1, 1}, {0, 1}, {1, 1}, {1, 0}, {-1, -1},{0, -1}, {1, -1} }; void dfs(int x, int y); int main() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;m); int i, j; color = 0; for (i = 0; i &amp;lt; n; ++i) { scanf(&amp;#34;%s&amp;#34;, maze[i]); } for (i = 0; i &amp;lt; n; ++i) { for (j = 0; j &amp;lt; m; ++j) { if (!</description>
    </item>
    
    <item>
      <title>Suduko</title>
      <link>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/sudoku/</link>
      <pubDate>Wed, 19 Feb 2020 21:37:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/sudoku/</guid>
      <description>题目链接 POJ2676 Lake Counting
题目描述 9*9的数独
解题思路  用dfs，首先将代填的空用vector记录出来，然后每个空按数字1到9填入。 通过row[i][k]表示数字k是否已在第i行出现;col[i][k]表示数字k是否已在第i列出现。加快对数字的判断。check()函数判断数字是否在该3*3块中满足条件。  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;string&amp;gt;#include&amp;lt;cmath&amp;gt;using namespace std; char c[9][9]; int a[9][9];//数独 int row[10][10];//row[i][k]表示数字k是否已在第i行出现 int col[10][10];//col[i][k]表示数字k是否已在第i列出现 struct State { int x, y; State(int xx, int yy) { x = xx; y = yy; } State(){} }; vector&amp;lt;State&amp;gt; ste; bool check(int x, int y, int k) { int sx = (x / 3) * 3; int sy = (y / 3) * 3; for (int i = sx; i &amp;lt; sx + 3; ++i) { for (int j = sy; j &amp;lt; sy + 3; ++j) { if (a[i][j] == k) { return 0; } } } return 1; } int dfs(int num) { if (num == ste.</description>
    </item>
    
    <item>
      <title>部分和问题</title>
      <link>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/%E9%83%A8%E5%88%86%E5%92%8C%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 19 Feb 2020 21:01:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E6%90%9C%E7%B4%A2/%E9%83%A8%E5%88%86%E5%92%8C%E9%97%AE%E9%A2%98/</guid>
      <description>题目描述 给定n(n&amp;lt;20)个数，判断是否可以从中选出若干个数，使他们的和为k。
解题思路  用dfs枚举可能的组合  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;string&amp;gt;using namespace std; const int MAXN = 30; int n;//n个数 int k; int a[MAXN]; bool dfs(int x, int sum); int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); int i; for (i = 0; i &amp;lt; n; ++i) { scanf(&amp;#34;%d&amp;#34;, &amp;amp;a[i]); } scanf(&amp;#34;%d&amp;#34;, &amp;amp;k); bool ans; ans = dfs(0, 0); if (ans) { printf(&amp;#34;Yes\n&amp;#34;); } else printf(&amp;#34;No\n&amp;#34;); return 0; } bool dfs(int x, int sum) { if (x == n) { if (sum == k) return true; return false; } //不加上a[x]  if (dfs(x + 1, sum)) return true; //加上a[x]  if (dfs(x + 1, sum + a[x])) return true; return false; } </description>
    </item>
    
  </channel>
</rss>