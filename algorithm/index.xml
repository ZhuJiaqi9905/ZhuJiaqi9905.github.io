<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on My New Hugo Site</title>
    <link>https://zhujiaqi9905.github.io/algorithm/</link>
    <description>Recent content in Algorithms on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 02 Feb 2020 08:20:47 +0800</lastBuildDate>
    
	<atom:link href="https://zhujiaqi9905.github.io/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>POJ2528 Mayor&#39;s poster</title>
      <link>https://zhujiaqi9905.github.io/algorithm/segment_tree/poj2528mayors_poster/</link>
      <pubDate>Sun, 02 Feb 2020 08:20:47 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/algorithm/segment_tree/poj2528mayors_poster/</guid>
      <description>题目链接 POJ2528 Mayor&amp;rsquo;s poster
题目描述  用多张海报贴一面墙，求贴完后有几张海报是可见的（完全可见+部分可见）。 题目有多组数据。 对于每组数据有n个海报，每个海报给定左、右端点，并按照贴的顺序给出。  解题思路  利用线段树，注意处理顺序是由外层到内层。因为外层覆盖的区间会影响内层的可见情况，而内层覆盖的区间不会影响外层的可见情况。 注意延迟更新  代码 #include&amp;lt;iostream&amp;gt; #include&amp;lt;cstdio&amp;gt; #include&amp;lt;cstring&amp;gt; #include&amp;lt;cstdlib&amp;gt; #include&amp;lt;algorithm&amp;gt; #include&amp;lt;vector&amp;gt; #include&amp;lt;queue&amp;gt; #include&amp;lt;string&amp;gt; #include&amp;lt;stack&amp;gt; #include&amp;lt;cmath&amp;gt; using namespace std; struct Node { int L, R; bool covered; int Mid() { return L + (R - L) / 2; } }; struct Line { int s, e; }; Line poster[10010];//记录海报 int disc[40010];//用于离散化 Node tree[160010];//线段树 int point[40010];//记录海报的两个端点，用于离散化 int point_num;//记录去重后的端点个数 void build_tree(int root, int l, int r); bool query_tree(int root, int l, int r); int main() { int c; int n;//c个样例，n个海报 scanf(&amp;quot;%d&amp;quot;, &amp;amp;c); int ans; int i, j; while (c--) { ans = 0; scanf(&amp;quot;%d&amp;quot;, &amp;amp;n); for (i = 0; i &amp;lt; n; ++i) { scanf(&amp;quot;%d%d&amp;quot;, &amp;amp;poster[i].</description>
    </item>
    
  </channel>
</rss>