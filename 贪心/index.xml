<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>贪心 on My New Hugo Site</title>
    <link>https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/</link>
    <description>Recent content in 贪心 on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Feb 2020 14:35:00 +0800</lastBuildDate>
    
	<atom:link href="https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Radar Installation</title>
      <link>https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/radar-installation/</link>
      <pubDate>Wed, 26 Feb 2020 23:17:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/radar-installation/</guid>
      <description>题目链接 百练 Radar Installation
题目描述  有n个岛屿的x,y坐标，要往x轴上装雷达，已知雷达与岛屿的有效距离d。求最少装几个雷达，能覆盖全部岛屿。如果没有解，输出-1  解题思路  贪心 首先利用坐标和d计算每个岛屿对应的有效雷达在x轴上的区间。 将区间按右端点从小到大排序，右端点相同的，按左端点从大到小排序。 首先在0号区间的右端点装雷达，然后判断它能覆盖几个区间。遇到不能覆盖的区间，就在它的右端点装个雷达，以此类推。  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;string&amp;gt;using namespace std; int n;//n个岛屿 int d;//距离 struct Line { double s; double e; //将区间按右端点从小到大排序，右端点相同的，按左端点从大到小排  bool operator &amp;lt;(const Line&amp;amp; l)const { if (e == l.e) { return s &amp;gt; l.s; } return e &amp;lt; l.e; } }; Line line[1010]; Line getLine(int x, int y); int main() { int kase = 0; while (scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;d)) { if (n == 0 &amp;amp;&amp;amp; d == 0) break; int i, j; int x, y; kase++; bool noAns = 0; for (i = 0; i &amp;lt; n; ++i) { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;x, &amp;amp;y); if (y &amp;gt; d) { noAns = 1; } else { line[i] = getLine(x, y); } } if (noAns) { printf(&amp;#34;Case %d: -1\n&amp;#34;, kase); continue;//注意这里不是break  } sort(line, line + n); int total = 1; int temp = 0; for (i = 1; i &amp;lt; n; ++i) { if (line[i].</description>
    </item>
    
    <item>
      <title>圣诞老人的礼物</title>
      <link>https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/%E5%9C%A3%E8%AF%9E%E8%80%81%E4%BA%BA%E7%9A%84%E7%A4%BC%E7%89%A9/</link>
      <pubDate>Mon, 24 Feb 2020 22:01:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/%E5%9C%A3%E8%AF%9E%E8%80%81%E4%BA%BA%E7%9A%84%E7%A4%BC%E7%89%A9/</guid>
      <description>题目链接 百练 圣诞老人的礼物
题目描述  可以拿部分物品的背包问题。  解题思路  贪心 计算每件物品的价值与重量的比值，并从大到小排序。  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;string&amp;gt;using namespace std; int n; int w; struct Candy { int w; int val; double ratio; bool operator &amp;lt;(const Candy&amp;amp; c)const { return ratio &amp;gt; c.ratio; } }; Candy candies[110]; int main() { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;n, &amp;amp;w); int i; for (i = 0; i &amp;lt; n; ++i) { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;candies[i].val, &amp;amp;candies[i].w); candies[i].ratio = (double)candies[i].val / (double)candies[i].w; } sort(candies, candies + n); int totalW = 0; double totalV = 0; for (i = 0; i &amp;lt; n; ++i) { if (totalW + candies[i].</description>
    </item>
    
    <item>
      <title>电影节</title>
      <link>https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/%E7%94%B5%E5%BD%B1%E8%8A%82/</link>
      <pubDate>Mon, 24 Feb 2020 22:01:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/%E7%94%B5%E5%BD%B1%E8%8A%82/</guid>
      <description>题目链接 百练 电影节
题目描述  给一堆电影的开始时间和结束时间，问最多可以看几部电影  解题思路  贪心 按电影的结束时间先后排序。从第一个电影开始看，结束后就看下一个能看的电影。注意一个电影的结束时间和另一个的开始时间能重合。  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;string&amp;gt;using namespace std; int n; struct Movie { int s; int e; bool operator &amp;lt;(const Movie&amp;amp; m)const { return e &amp;lt; m.e; } }; Movie mve[1010];//电影的开始时间和结束时间 int main() { while (scanf(&amp;#34;%d&amp;#34;, &amp;amp;n)) { if (!n) { break; } int i; for (i = 0; i &amp;lt; n; ++i) { scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;mve[i].s, &amp;amp;mve[i].e); } sort(mve, mve + n); int end = 0; int total = 0; for (i = 0; i &amp;lt; n; ++i) { if (end &amp;lt;= mve[i].</description>
    </item>
    
    <item>
      <title>Stall Reservations</title>
      <link>https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/stall-reservations/</link>
      <pubDate>Mon, 24 Feb 2020 21:38:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/stall-reservations/</guid>
      <description>题目链接 POJ3190 Stall Reservations
题目描述  有n头牛挤奶，已知每头牛挤奶的开始时间和结束时间。每个牛都要在一个畜栏中挤奶，一个畜栏同一时间只能放一头牛。哪怕挤奶时间的区间端点重合也不行。 问至少需要多少畜栏，每头牛都放在哪个畜栏里。  解题思路  贪心 首先将奶牛按挤奶的开始时间排序。 为第一个奶牛分配畜栏。 依次处理后面的每一个奶牛i。在处理i时，考虑已分配的畜栏中，结束时间最早的畜栏x。  如果End(x)&amp;lt;Start(i), 则不分配新畜栏。 如果End(x)&amp;gt;=Start(i),则分配新畜栏。   用优先队列维护已经分配的畜栏。  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;string&amp;gt;using namespace std; int n; struct Cow { int a, b;//挤奶区间起始点  int No;//编号  bool operator &amp;lt;(const Cow&amp;amp; c)const { return a &amp;lt; c.a; } }; struct Stall { int end;//结束时间  int No;//畜栏编号  bool operator &amp;lt;(const Stall&amp;amp; s) const { return end &amp;gt; s.</description>
    </item>
    
    <item>
      <title>Best Cow Line</title>
      <link>https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/best-cow-line/</link>
      <pubDate>Thu, 20 Feb 2020 14:37:00 +0800</pubDate>
      
      <guid>https://zhujiaqi9905.github.io/%E8%B4%AA%E5%BF%83/best-cow-line/</guid>
      <description>题目链接 POJ3617 Best Cow Line
题目描述  奶牛题，抽象出来就是，给定长度为N的字符串S，要构造出一个长度N的字符串T。构造方式是：从S的头部或尾部删除一个字符，加到T的尾部 求字典序最小的T，每次输出80个字符后换行  解题思路  贪心，每次比较剩余的S串的头尾，选小的加入T的尾部。 要注意到头尾相同的情况，这是要接着往里比较，因为我们希望尽可能早使用更小的字符。 可以用a,b初始时指向S串的头尾，然后不断往里缩。  代码 #include&amp;lt;iostream&amp;gt;#include&amp;lt;cstdio&amp;gt;#include&amp;lt;cstring&amp;gt;#include&amp;lt;cstdlib&amp;gt;#include&amp;lt;algorithm&amp;gt;#include&amp;lt;vector&amp;gt;#include&amp;lt;queue&amp;gt;#include&amp;lt;string&amp;gt;using namespace std; int N; char s[10010]; char t[10010]; int main() { scanf(&amp;#34;%d&amp;#34;, &amp;amp;N); getchar(); int i; for (i = 0; i &amp;lt; N; ++i) { scanf(&amp;#34;%c&amp;#34;, &amp;amp;s[i]); getchar(); } int j = 0; int a = 0; int b = N - 1; //指向初始s的头尾，往里缩  while (a &amp;lt;= b) { bool left = false; //如果头尾相同，就不断往里找  for (i = 0; a + i &amp;lt;= b; ++i) { if (s[a + i] &amp;lt; s[b - i]) { left = true; break; } else if (s[a + i] &amp;gt; s[b - i]) { left = false; break; } } if (left) { t[j] = s[a]; a++; j++; } else { t[j] = s[b]; b--; j++; } } t[N] = &amp;#39;\0&amp;#39;; for (int i = 0; i &amp;lt; N; ++i) { if (i % 80 == 0 &amp;amp;&amp;amp; i !</description>
    </item>
    
  </channel>
</rss>